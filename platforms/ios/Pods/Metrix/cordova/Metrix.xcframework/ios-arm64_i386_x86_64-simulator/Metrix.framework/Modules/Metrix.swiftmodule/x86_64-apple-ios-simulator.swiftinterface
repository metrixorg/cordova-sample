// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target x86_64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Metrix
import AdSupport
import SystemConfiguration.CaptiveNetwork
import CommonCrypto
import CoreLocation
import CoreTelephony
import CryptoKit
import Foundation
@_exported import Metrix
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
extension Foundation.Date {
  public static func - (first: Foundation.Date, second: Foundation.Date) -> Foundation.TimeInterval
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class MetrixClient : ObjectiveC.NSObject {
  @objc public static func initialize(metrixAppId: Swift.String)
  @objc public static func setSessionNumberListener(_ listener: @escaping Metrix.SessionNumberListener)
  @objc public static func setSessionIdListener(_ listener: @escaping Metrix.SessionIdListener)
  @objc public static func newEvent(slug: Swift.String)
  @objc public static func newEvent(slug: Swift.String, attributes: [Swift.String : Swift.String])
  @objc public static func newRevenue(slug: Swift.String, revenue: Swift.Double)
  @objc public static func newRevenue(slug: Swift.String, revenue: Swift.Double, currency: Metrix.RevenueCurrency)
  @objc public static func newRevenue(slug: Swift.String, revenue: Swift.Double, orderId: Swift.String)
  @objc public static func newRevenue(slug: Swift.String, revenue: Swift.Double, currency: Metrix.RevenueCurrency, orderId: Swift.String?)
  @objc public static func addUserAttributes(userAttrs: [Swift.String : Swift.String])
  @objc public static func setDefaultTracker(trackerToken: Swift.String)
  @objc public static func setOnAttributionChangedListener(_ listener: @escaping Metrix.OnAttributionChangeListener)
  @objc public static func setUserIdListener(_ listener: @escaping Metrix.UserIdListener)
  @objc public static func setStore(storeName store: Swift.String)
  @objc public static func setPushToken(pushToken: Swift.String)
  @objc public static func setAppSecret(secretId: Swift.Int, info1: Swift.Int, info2: Swift.Int, info3: Swift.Int, info4: Swift.Int)
  @objc public static func setOnDeeplinkResponseListener(_ listener: @escaping Metrix.OnDeeplinkResponseListener)
  @objc deinit
}
precedencegroup PowerPrecedence {
  higherThan: MultiplicationPrecedence
}
infix operator ^^ : PowerPrecedence
@_hasMissingDesignatedInitializers public class Observable<T> {
  @objc deinit
}
public typealias UserIdListener = (Swift.String) -> Swift.Void
public protocol LogHandler {
  func onLog(logItem: Metrix.MetrixLogger.LogItem)
}
@_hasMissingDesignatedInitializers public class MetrixLogger {
  @_hasMissingDesignatedInitializers public class LogItem {
    @objc deinit
  }
  @objc deinit
}
@objc public enum RevenueCurrency : Swift.Int, Swift.RawRepresentable, Swift.Codable {
  case IRR
  case USD
  case EUR
  public typealias RawValue = Swift.String
  public var rawValue: Metrix.RevenueCurrency.RawValue {
    get
  }
  public init?(rawValue: Metrix.RevenueCurrency.RawValue)
}
@objc public enum AttributionStatus : Swift.Int, Swift.RawRepresentable, Swift.Codable {
  case attributed
  case notAttributedYet
  case attributionNotNeed
  case unknown
  public typealias RawValue = Swift.String
  public var rawValue: Metrix.AttributionStatus.RawValue {
    get
  }
  public init?(rawValue: Metrix.AttributionStatus.RawValue)
}
@_hasMissingDesignatedInitializers @objc public class AttributionData : ObjectiveC.NSObject, Swift.Codable {
  @objc public var acquisitionAd: Swift.String?
  @objc public var acquisitionAdSet: Swift.String?
  @objc public var acquisitionCampaign: Swift.String?
  @objc public var acquisitionSource: Swift.String?
  @objc public var attributionStatus: Metrix.AttributionStatus
  @objc public var trackerToken: Swift.String?
  @objc public var attributionStatusRaw: Swift.String {
    @objc get
  }
  @objc public var jsonValue: Swift.String {
    @objc get
  }
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public typealias OnAttributionChangeListener = (Metrix.AttributionData) -> Swift.Void
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Relay<T> : Metrix.Observable<T> {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Debouncer {
  public func renewInterval()
  @objc deinit
}
public typealias OnDeeplinkResponseListener = (Swift.String) -> Swift.Bool
public typealias SessionIdListener = (Swift.String) -> Swift.Void
public typealias SessionNumberListener = (Swift.Int) -> Swift.Void
extension Metrix.RevenueCurrency : Swift.Equatable {}
extension Metrix.RevenueCurrency : Swift.Hashable {}
extension Metrix.AttributionStatus : Swift.Equatable {}
extension Metrix.AttributionStatus : Swift.Hashable {}
